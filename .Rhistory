summary(fit)
fit <- glm(factor(use) ~ factor(wind), data = shuttle, family=binomial)
fit <- glm(1-factor(use) ~ factor(wind), data = shuttle, family=binomial)
shuttle[shuttle$use = "auto", ]
shuttle[shuttle$use == "auto", ]
shuttle[shuttle$use == "auto", ]$use
shuttle[shuttle$use == "auto", ]$use <- 1
shuttle[shuttle$use == "auto", ]$use
data(shuttle)
shuttle[shuttle$use == "auto", ]$use <- 1
data(shuttle)
shuttle[shuttle$use == "auto", ]$use2 <- 1
shuttle[shuttle$use == "auto", ]$use2
data("InsectSprays")
fit <- glm(factor(spray) ~ ., data = InsectSprays, family="poisson")
fit <- glm(factor(spray), data = InsectSprays, family="poisson")
View(InsectSprays)
fit <- glm(factor(spray) ~ count, data = InsectSprays, family="poisson")
install.packages("caret")
library(caret)
install.packages("ggplot2")
library(ggplot2)
library(caret)
install.packages("pbkrtest")
update.packages(checkBuilt = TRUE)
swirl()
library(swirl)
update.packages(checkBuilt = TRUE)
library(caret)
install.packages("pbkrtest")
updateR()
library(installr)
swirl()
library(swirl)
swirl
swirl()
library(caret)
library(kernlab)
install.packages("kernlab")
library(kernlab)
data(spam)
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
install.packages("pbkrtest")
?install.packages
install.packages("caret")
library(caret)
install.packages("pbkrtest")
library(caret)
library(kernlab)
data(spam)
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
library(caret)
set.seed(32323)
folds <- createFold(y=spam$type, k=10, list=TRUE, returnTrain=TRUE)
folds <- createFolds(y=spam$type, k=10, list=TRUE, returnTrain=TRUE)
sapply(folds, length)
folds[[1]][1:10]
names(folds)
modelFit <- train(type ~., data=training, method="glm")
install.packages("e1071")
modelFit <- train(type ~., data=training, method="glm")
args(trainControl)
modelFit
set.seed(1235)
modelFit2 <- train(type ~., data=training, method="glm")
modelFit2
install.packages("ISLR")
library(ISLR)
data(Wage)
summary(Wage)
inTrain <- createDataPartition(y=Wage$wage, p=0.7, list=FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
dim(training)
dim(testing)
featurePlot(x=training[c("age", "education", "jobclass")], y=training$wage, plot="pairs")
qplot(age,wage,data=training)
qplot(age,wage,data=training,color=jobclass)
qplot(age,wage,data=training,color=jobclass) -> qq
qplot(age,wage,data=training,color=education) -> qq
qq + geom_smooth(method='lm', formula=y~x)
install.packages("Hmisc")
cutWage <- cut2(training$wage,g3)
library(Hmisc)
cutWage <- cut2(training$wage,g3)
cutWage <- cut2(training$wage,g=3)
table(cutWage)
p1 <- qplot(cutWage,age,data=training,fill=cutWage,geom=c("boxplot"))
p1
p1 <- qplot(cutWage,age,data=training,fill=cutWage,geom=c("boxplot", "jitter"))
p2 <- qplot(cutWage,age,data=training,fill=cutWage,geom=c("boxplot", "jitter"))
p1 <- qplot(cutWage,age,data=training,fill=cutWage,geom=c("boxplot", "jitter"))
p1 <- qplot(cutWage,age,data=training,fill=cutWage,geom=c("boxplot"))
grid.arrange(p1, p2, ncol=2)
p2
t1 <- table(cutWage,training$jobclass)
t1
prop.table(t1,1)
qplot(wage,colour=education,data=training,geom="density")
library(caret)
library(kernlab)
data(spam)
inTrain <- createDataPartition(y=spam$type,p=0.75,list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
hist(training$capitalAve,main="",xlab="ave. capital run length")
mean(training$capitalAve)
sd(training$capitalAve)
trainCapAve <- training$capti
trainCapAve <- training$capitalAve
trainCapAveS <- (trainCapAve - mean(trainCapAve))/sd(trainCapAve)
mean(trainCapAveS)
sd(trainCapAveS)
testCapAveS <- (testCapAve - mean(trainCapAve))/sd(trainCapAve)
testCapAve <- testing$capitalAve
testCapAveS <- (testCapAve - mean(trainCapAve))/sd(trainCapAve)
mean(testCapAveS)
sd(testCapAveS)
preObj <- preProcess(training[,-58], method=c("center","scale"))
trainCapAveS <- predict(preObj,training[,-58])$capitalAve
mean(trainCapAveS)
set.seed(32343)
modelFit <- train(type ~., data=training, preProcess=c("center", "scale"),method="glm")
modelFit
?createDataPartition
table(training$jobclass)
?training
library(ISLR)
library(caret)
data(Wage)
inTrain <- createDataPartition(y=Wage$wage, p=0.7, list=FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
table(training$jobclass)
dummies <- dummyVars(wage ~ jobclass, data=training)
head(predict(dummies, newdata=training))
nsv <- nearZeroVar(training, saveMetrics=TRUE)
nsv
library(splines)
bsBasis <- bs(training$age,df=3)
bsBasis
head(bsBasis)
lm1 <- lm(wage ~ bsBasis, data=training)
plot(training$age, training$wage, pch=19,cex=0.5)
points(training$age,predict(lm1,newdata=training), col="red", pch=19,cex=0.5)
predict(bsBasis, age=testing$age)
head(predict(bsBasis, age=testing$age))
M <- abs(cor(training[,-58]))
M <- abs(cor(training[,-58]))
data("faithful")
set.seed(333)
inTrain <- createDataPartition(y=faithful$waiting, p=0.5, list=FALSE)
trainFaith <- faithful[inTrain,]
testFaith <- faithful[-inTrain,]
head(trainFaith)
plot(trainFaith$waiting, trainFaith$eruptions,pch=19,col="blue",xlab="Waiting",ylab="Duration")
lm1 <- lm(eruptions ~ waiting, data=trainFaith)
summary(lm1)
lines(trainFaith$waiting,lm1$fitted,lwd=3)
coef(lm1)[1] +  coef(lm1)[2]*80
newdata <- data.frame(waiting=80)
predict(lm1, newdata)
library(ISLR)
library(caret)
data(Wage)
Wage <- subset(Wage,select=-c(logwage))
summary(Wage)
inTrain <- createDataPartition(y=Wage$wage, p=0.7, list=FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
dim(training)
dim(testing)
modFit <- train(wage ~ age + jobclass + education, method="lm", data=training)
finMod <- modFit$finalModel
print(modFit)
class(modFit)
plot(finMod,1,pch=19,cex=0.5,col="#00000010")
plot(finMod$residuals,pch=19)
pred <- predict(modFit, testing)
qplot(wage,pred,colour=year,data=testing)
library(AppliedPredictiveModeling)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain <- createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training <- mixtures[inTrain,]
testing <- mixtures[-inTrain,]
plot(mixtures$CompressiveStrength,pch=19)
names(mixtures)
plot(mixtures$CompressiveStrength,colour=Cement,pch=19)
plot(CompressiveStrength,colour=Cement,data=mixtures,pch=19)
plot(mixtures$CompressiveStrength,colour=Cement,data=mixtures,pch=19)
plot(mixtures$CompressiveStrength,colour=mixtures$Cement,data=mixtures,pch=19)
plot(mixtures$CompressiveStrength,colour=mixtures$Age,data=mixtures,pch=19)
plot(mixtures$CompressiveStrength,colour=mixtures$Age,pch=19)
qplot(CompressiveStrength,colour=Cement,data=mixtures)
plot(mixtures$CompressiveStrength,pch=19)
plot(mixtures$CompressiveStrength,pch=19,colour=mixtures$Age)
plot(mixtures$CompressiveStrength,pch=19,col=mixtures$Age)
plot(mixtures$CompressiveStrength,pch=19,col=mixtures$Water)
plot(mixtures$CompressiveStrength,pch=19,col=mixtures$FlyAsh)
head(mixtures)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(mixtures$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433); data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433); data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]; training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
M <- abs(cor(training[,]))
head(training)
str_detect(names(training), "IL*")
library(stringr
library(stringr)
library(stringr)
str_detect(names(training), "IL*")
str_detect(names(training), "IL*") -> myNames
training[, myNames]
M <- abs(cor(training[, myNames]))
diag(M) <- 0
which(M > 0.8, arr.ind=T)
names(training[,myNames])
str_detect(names(training), "IL.*") -> myNames
names(training[,myNames])
M <- abs(cor(training[, myNames]))
diag(M) <- 0
which(M > 0.8, arr.ind=T)
prComp <- prcomp(training[, myNames])
prComp
names(training[,myNames])
names(training[,myNames[1:12]])
names(training[,myNames])
str_detect(names(training), "^IL.*") -> myNames
names(training[,myNames])
prComp <- prcomp(training[, myNames])
prComp
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433);data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]];training = adData[ inTrain,]
testing = adData[-inTrain,]
str_detect(names(training), "^IL.*") -> myNames
names(training)
names(training[,c(1,myNames)])
training[,myNames] -> first
training[,1] -> diag
rbind(diag,first)
rbind(diag,first) -> newTrain
names(newTrain)
names(diag)
training[,1] -> diag
names(diag)
diag
names(training)
training[,1]
training[,diagnosis]
training$diagnosis
training$diagnosis -> diag
diag
rbind(as.data.frame(diag), first)
dim(first)
class(first)
class(diag)
as.data.frame(diag)
as.data.frame(diag) -> test
dim(test)
dim(first)
cbind(test,first)
cbind(test,first) -> newTrain
dim(newTrain)
head(newTrain)
modFit <- train(diag ~ .,data=newTrain,method="glm")
modFit2 <- train(diag ~ .,data=newTrain,method="glm",preProcess="pca")
modFit
modFit2
training[,myNames]
names(training[,myNames])
preProc <- preProcess(training[,myNames],method="pca",pcaComp=2)
preProc
preProc <- preProcess(newTrain,method="pca",pcaComp=2)
preProc
?preProcess
preProc <- preProcess(newTrain,thresh=0.9,method="pca",pcaComp=2)
preProc
preProc <- preProcess(training[,myNames],thresh=0.9,method="pca",pcaComp=2)
preProc
preProc <- preProcess(training[,myNames],thresh=0.9,method="pca")
preProc
data("iris")
library(ggplot2)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
library(caret)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
modFit <- train(Species~.,data=training,method="rf",prox=TRUE)
modFit <- train(Species~.,data=training,method="rf",prox=TRUE)
getTree(modFit$finalModel)
pred <- predit(modFit,testing)
pred <- predict(modFit,testing)
testing$predRight <- pred==testing$Species
table(pred,testing$predRight)
table(pred,testing$Species)
dim(testing)
modlda = train(Species ~., data=training,method="lda")
modnb = train(Species ~., data=training,method="nb")
modnb = train(Species ~., data=training,method="nb")
plda <- predict(modlda,testing); pnb <- predict(modnb,testing)
table(plda,pnb)
equalPredictions <- (plda==pnb)
qplot(Petal.Width,Sepal.Width,colour=equalPredictions,data=testing)
install("AppliedPredictiveModeling")
install.packages("AppliedPredictiveModeling")
install.packages("ElemStatLearn")
install.packages("pgmm")
install.packages("rpart")
library(AppliedPredictiveModeling)
data("segmentationOriginal")
library(caret)
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.7, list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
dim(training)
dim(testing)
set.seed(125)
modFit <- train(Case ~ ., method="rpart",data=training)
modFit$finalModel
table(segmentationOriginal$Case)
names(segmentationOriginal)
?caret
library(pgmm)
data(olive)
olive = olive[,-1]
modFitolive <- train(Area ~ ., method="rpart",data=olive)
modFitolive$finalModel
?tree
tree
install.packages("tree")
newddata = as.data.frame(t(colMeans(olive)))
?tree
library(tree)
?tree
tree(modFitolive, newddata)
predict(modFitolive, data=newddata)
modFitolive <- train(Area ~ ., method="rf",data=olive,prox=TRUE)
predict(modFit,newddata)
predict(modFitolive,newddata)
set.seed(125)
names(training)
dim(training)
fit <- rpart(Case ~ .,data=training)
fit <- train(Case ~., method="rpart",data=training)
fit$finalModel
testing[,103]
testing[testing$TotalIntenCh1 == 23000,]
mydata <- c(23000,10,2)
as.data.frame(mydata)
mydata <- cbind(2300,10,2)
mydata
colnames(mydata) <- c("TotalIntenCh2","FiberWidthCh1","PerimStatusCh1")
mydata
predict(fit,mydata)
predict(fit$finalModel,mydata)
mydata <- as.data.frame(mydata)
predict(fit$finalModel,mydata)
predict(fit,mydata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
names(trainSA)
source('~/Question4.R')
table(trainSA$chd)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
predict(modFit, train)
predict(modFit, trainSA)
source('~/Question4.R')
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method="glm", family="binomial", data=train)
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method="glm", family="binomial", data=trainSA)
modFit$finalModel
pred <- predict(modFit, trainSA)
predtest <- predict(modFit, testSA)
missClass(testSA,predtest)
missClass(trainSA$chd,pred)
missClass(testSA,predtest)
missClass(testSA$chd,predtest)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
names(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modFit <- train(y ~ ., method="rf", data=vowel.train,prox=TRUE)
?varImp
varImp(modFit)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modFit <- train(y ~ ., method="rf", data=vowel.train)
varImp(modFit)
remove.packages(caret); remove.packages(randomForest); packageurl <- "https://cran.r-project.org/bin/macosx/contrib/3.1/caret_6.0-47.tgz ; install.packages(packageurl, repos=NULL, type="source")
remove.packages("caret")
remove.packages("randomForest")
packageurl <- "https://cran.r-project.org/bin/macosx/contrib/3.1/caret_6.0-47.tgz ; install.packages(packageurl, repos=NULL, type="source")
packageurl <- "https://cran.r-project.org/bin/macosx/contrib/3.1/caret_6.0-47.tgz  install.packages(packageurl, repos=NULL, type="source")
packageurl <- "https://cran.r-project.org/bin/macosx/contrib/3.1/caret_6.0-47.tgz
""
"
packageurl <- "https://cran.r-project.org/bin/macosx/contrib/3.1/caret_6.0-47.tgz"
install.packages(packageurl, repos=NULL, type="source")
set.seed(33833)
modFit <- train(y ~ ., method="rf", data=vowel.train,prox=TRUE)
set.seed(33833)
modFit <- train(y ~ ., method="rf", data=vowel.train,prox=TRUE)
modFit
varImp(modFit)
modFit <- train(y ~ ., method="RandomForest", data=vowel.train,prox=TRUE)
modFit <- train(y ~ ., method="rf", data=vowel.train,prox=TRUE)
install.packages("caret")
install.packages("caret")
set.seed(33833)
modFit <- train(y ~ ., method="rf", data=vowel.train,prox=TRUE)
varImp(modFit)
install.packages(packageurl, repos=NULL, type="source")
set.seed(33833)
modFit <- train(y ~ ., method="rf", data=vowel.train,prox=TRUE)
varImp(modFit)
library(caret)
set.seed(33833)
modFit <- train(y ~ ., method="rf", data=vowel.train,prox=TRUE)
varImp(modFit)
restart
set.seed(33833)
modFit <- train(y ~ ., method="rf", data=vowel.train,prox=TRUE)
varImp(modFit)
library(caret)
install.packages("BradleyTerry2")
library(caret)
set.seed(33833)
modFit <- train(y ~ ., method="rf", data=vowel.train,prox=TRUE)
varImp(modFit)
#Question 1
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
set.seed(125)
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.7,list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
modFit <- train(Case ~ ., method="rpart",data=training)
modFit$finalModel
head(training)
modFit <- train(Class ~ ., method="rpart",data=training)
modFit$finalModel
modFit <- train(Class ~ TotalIntenCh2 + FiberWidthCh1 + VarIntenCh4 + PerimStatusCh1, method="rpart",data=training)
modFit$finalModel
library(pgmm)
data(olive)
olive = olive[,-1]
modFit <- train(Area ~ ., method="rpart", data=olive)
newdata = as.data.frame(t(colMeans(olive)))
modFit$finalModel
predict(modFit,newdata)
exit
quit()
slidify("index.html")
library(slidify)
slidify("index.html")
setwd("~/Dropbox/DevelopngDataProducts/first_deck")
setwd("~/Dropbox/DevelopngDataProducts/first_deck")
slidify("index.html")
slidify("index.html")
```{r, run=FALSE}
